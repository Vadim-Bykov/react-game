[{"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\index.js":"1","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\App\\App.js":"3","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\store.js":"4","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Main\\Main.jsx":"5","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Footer\\Footer.jsx":"6","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Header\\HeaderContainer.jsx":"7","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\burgerReducer.js":"8","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\mainReducer.js":"9","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\statsReducer.js":"10","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\selectors\\burgerSelectors.js":"11","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Header\\Header.jsx":"12","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Board\\BoardContainer.jsx":"13","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Menu\\Menu.jsx":"14","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\deck.js":"15","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\selectors\\mainSelectors.js":"16","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\selectors\\statsSelectors.js":"17","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Board\\Board.jsx":"18","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\ChangeSize\\ChangeSize.jsx":"19","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Music\\Music.jsx":"20","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\CardBackground\\CardBackground.jsx":"21","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Sound\\Sound.jsx":"22","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Card\\Card.jsx":"23","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Switch\\Switch.jsx":"24","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Stats\\StatsContainer.jsx":"25","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Stats\\Stats.jsx":"26","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\StatsPage\\StatsPageContainer.jsx":"27","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\StatsPage\\StatsPage.jsx":"28"},{"size":303,"mtime":1613568165672,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1613567124619,"results":"31","hashOfConfig":"30"},{"size":846,"mtime":1614273227077,"results":"32","hashOfConfig":"30"},{"size":633,"mtime":1614191876296,"results":"33","hashOfConfig":"30"},{"size":338,"mtime":1614264906757,"results":"34","hashOfConfig":"30"},{"size":893,"mtime":1614264422837,"results":"35","hashOfConfig":"30"},{"size":1063,"mtime":1614107351243,"results":"36","hashOfConfig":"30"},{"size":2969,"mtime":1614185566861,"results":"37","hashOfConfig":"30"},{"size":5521,"mtime":1614263310275,"results":"38","hashOfConfig":"30"},{"size":3758,"mtime":1614265873013,"results":"39","hashOfConfig":"30"},{"size":327,"mtime":1614104690206,"results":"40","hashOfConfig":"30"},{"size":692,"mtime":1614186427126,"results":"41","hashOfConfig":"30"},{"size":4176,"mtime":1614264241353,"results":"42","hashOfConfig":"30"},{"size":1690,"mtime":1614273105853,"results":"43","hashOfConfig":"30"},{"size":796,"mtime":1613746814972,"results":"44","hashOfConfig":"30"},{"size":419,"mtime":1613906177878,"results":"45","hashOfConfig":"30"},{"size":451,"mtime":1614265222908,"results":"46","hashOfConfig":"30"},{"size":1414,"mtime":1614102685990,"results":"47","hashOfConfig":"30"},{"size":1511,"mtime":1614256861190,"results":"48","hashOfConfig":"30"},{"size":1322,"mtime":1614108291312,"results":"49","hashOfConfig":"30"},{"size":1842,"mtime":1614107369441,"results":"50","hashOfConfig":"30"},{"size":959,"mtime":1614107263276,"results":"51","hashOfConfig":"30"},{"size":1331,"mtime":1614102778889,"results":"52","hashOfConfig":"30"},{"size":537,"mtime":1614092825089,"results":"53","hashOfConfig":"30"},{"size":1766,"mtime":1614265011914,"results":"54","hashOfConfig":"30"},{"size":516,"mtime":1614264991569,"results":"55","hashOfConfig":"30"},{"size":1490,"mtime":1614267364652,"results":"56","hashOfConfig":"30"},{"size":589,"mtime":1614267384995,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ezxjpl",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\index.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\App\\App.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\store.js",[],["121","122"],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Header\\HeaderContainer.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\burgerReducer.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\mainReducer.js",["123"],"import initializeDeck from '../deck';\nimport { setGameTime, setTrueAttempt, setFalseAttempt, statsResetState, saveFinishedGame } from './statsReducer';\n\nconst MAIN_SET_CARDS = 'MAIN_SET_CARDS';\nconst MAIN_SET_FLIPPED = 'MAIN_SET_FLIPPED';\nconst MAIN_SET_DIMENSION = 'MAIN_SET_DIMENSION';\nconst MAIN_SET_SOLVED = 'MAIN_SET_SOLVED';\nconst MAIN_SET_DISABLED = 'MAIN_SET_DISABLED';\n// const MAIN_SET_COUNT_PAIRS = 'MAIN_SET_COUNT_PAIRS';\nconst MAIN_RESET_STATE = 'MAIN_RESET_STATE';\nconst MAIN_SET_GAME_IN_PROGRESS = 'MAIN_SET_GAME_IN_PROGRESS';\n\nconst initialState = {\n  cards: [],\n  flipped: [],\n  dimension: 480,\n  solved: [],\n  disabled: false,\n  countPairs: 6,\n  gameInProgress: false,\n};\n\nconst getInitialState = () => {\n  let state;\n  const localState = JSON.parse(localStorage.getItem('state'));\n  if (localState) {\n    state = localState;\n  } else {\n    localStorage.setItem('state', JSON.stringify(initialState));\n    state = initialState;\n  }\n\n  return state;\n};\n\nconst mainReducer = (state = getInitialState(), action) => {\n  let newState;\n  switch (action.type) {\n    case MAIN_RESET_STATE:\n      newState = {\n        ...state,\n        cards: initializeDeck(action.countPairs),\n        flipped: [],\n        dimension: 480,\n        solved: [],\n        disabled: false,\n        countPairs: action.countPairs,\n        gameInProgress: false,\n      };\n      localStorage.setItem('state', JSON.stringify(newState));\n      return newState;\n\n    case MAIN_SET_CARDS:\n      newState = {\n        ...state,\n        cards: [...action.cards],\n      };\n      localStorage.setItem('state', JSON.stringify(newState));\n      return newState;\n\n    case MAIN_SET_FLIPPED:\n      newState = {\n        ...state,\n        flipped: [...action.array],\n      };\n      localStorage.setItem('state', JSON.stringify(newState));\n      return newState;\n\n    case MAIN_SET_DIMENSION:\n      newState = {\n        ...state,\n        dimension: action.value,\n      };\n      localStorage.setItem('state', JSON.stringify(newState));\n      return newState;\n\n    case MAIN_SET_SOLVED:\n      newState = {\n        ...state,\n        solved: [...action.array],\n      };\n      localStorage.setItem('state', JSON.stringify(newState));\n      return newState;\n\n    case MAIN_SET_DISABLED:\n      newState = {\n        ...state,\n        disabled: action.boolean,\n      };\n      localStorage.setItem('state', JSON.stringify(newState));\n      return newState;\n\n    case MAIN_SET_GAME_IN_PROGRESS:\n      return {\n        ...state,\n        gameInProgress: action.boolean,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const resetState = (countPairs) => ({\n  type: MAIN_RESET_STATE,\n  countPairs,\n});\nexport const setCards = (cards) => ({ type: MAIN_SET_CARDS, cards });\nexport const setFlipped = (array) => ({ type: MAIN_SET_FLIPPED, array });\nexport const setDimension = (value) => ({ type: MAIN_SET_DIMENSION, value });\nexport const setSolved = (array) => ({ type: MAIN_SET_SOLVED, array });\nexport const setDisabled = (boolean) => ({ type: MAIN_SET_DISABLED, boolean });\nexport const setGameInProgress = (boolean) => ({\n  type: MAIN_SET_GAME_IN_PROGRESS,\n  boolean,\n});\n\nexport const resizeBoard = () => (dispatch) => {\n  dispatch(\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      )\n    )\n  );\n};\n\nexport const showAllCards = () => (dispatch, getState) => {\n  const cards = getState().main.cards;\n  dispatch(setFlipped(cards.map((card) => card.id)));\n  setTimeout(() => dispatch(setFlipped([])), 3000);\n};\n\nexport const handleClick = (id, soundSuccess, soundError) => (dispatch, getState) => {\n  const cards = getState().main.cards;\n  const flipped = getState().main.flipped;\n  const solved = getState().main.solved;\n  const sameCardClicked = flipped.includes(id);\n\n  dispatch(setGameTime(true));\n  dispatch(setDisabled(true));\n  dispatch(setGameInProgress(true));\n\n  if (flipped.length === 0) {\n    dispatch(setFlipped([id]));\n    dispatch(setDisabled(false));\n  } else {\n    if (sameCardClicked) {\n      dispatch(setDisabled(false));\n      return;\n    }\n    dispatch(setFlipped([flipped[0], id]));\n    if (isMatch(id, cards, flipped)) {\n      dispatch(setSolved([...solved, flipped[0], id]));\n      resetFlippedCards(dispatch);\n      dispatch(setTrueAttempt());\n      getSound(getState, soundSuccess);\n    } else {\n      setTimeout(() => resetFlippedCards(dispatch), 1000);\n      dispatch(setFalseAttempt());\n      getSound(getState, soundError);\n    }\n  }\n};\n\nconst isMatch = (id, cards, flipped) => {\n  const clickedCard = cards.find((card) => card.id === id);\n  const flippedCard = cards.find((card) => flipped[0] === card.id);\n  return flippedCard.type === clickedCard.type;\n};\n\nconst getSound = (getState, sound) => {\n  const isSoundActive = getState().burger.isSoundActive;\n  if (!isSoundActive) return;\n  const volume = getState().burger.volume;\n  sound.current.volume = volume;\n  sound.current.play();\n}\n\nconst resetFlippedCards = (dispatch) => {\n  dispatch(setFlipped([]));\n  dispatch(setDisabled(false));\n  dispatch(setGameInProgress(false));\n};\n\n// export const setNewCountPairs = (countPairs) => (dispatch) => {\n//   dispatch(resetState(countPairs));\n//   dispatch(showAllCards());\n//   dispatch(setGameTime(false));\n// };\n\nexport const finishGame = (countPairs) => (dispatch) => {\n  dispatch(resetState(countPairs));\n  setTimeout(dispatch(showAllCards()));\n  // dispatch(showAllCards());\n  dispatch(statsResetState(false));\n};\n\nexport default mainReducer;\n","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\redux\\statsReducer.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\selectors\\burgerSelectors.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Board\\BoardContainer.jsx",["124","125","126"],"// import './Board.css';\nimport React, { createRef, useEffect } from 'react';\nimport { handleClick, resizeBoard, showAllCards, finishGame, setCards } from '../../redux/mainReducer';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { getCards, getCountPairs, getDimension, getDisabled, getFlipped, getGameInProgress, getSolved } from '../../selectors/mainSelectors';\nimport initializeDeck from '../../deck';\nimport Board from './Board';\n// import Card from '../Card/Card';\nimport soundSuccess from '../../assets/sound/success.mp3';\nimport soundError from '../../assets/sound/error.mp3';\nimport { getCardsBG, getOpacityBG } from '../../selectors/burgerSelectors';\nimport { saveFinishedGame } from '../../redux/statsReducer';\n\n\nconst BoardContainer = ({ resizeBoard, handleClick, showAllCards, finishGame, saveFinishedGame, cards, flipped, dimension, disabled, solved, setCards, countPairs, gameInProgress, cardsBG, opacity }) => {\n\n  const refSoundSuccess = createRef();\n  const refSoundError = createRef();\n\n  useEffect(() => {\n    const cardsArray = initializeDeck(countPairs);\n    if (!cards.length) {\n      setCards(cardsArray)\n    } else {\n      if (gameInProgress) return;\n      setCards(cardsArray)\n    };\n  }, [countPairs]);\n\n  useEffect(() => {\n    resizeBoard();\n    showAllCards();\n  }, [cards]);\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  useEffect(() => {\n    if (!cards.length) return;\n    if (solved.length === cards.length) {\n      saveFinishedGame(countPairs);\n      setTimeout(() => finishGame(countPairs), 1500);\n    }\n  }, [solved]);\n\n  return (\n    <>\n      <Board\n        cards={cards}\n        dimension={dimension}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        refSoundSuccess={refSoundSuccess}\n        refSoundError={refSoundError}\n        cardsBG={cardsBG}\n        opacity={opacity}\n      />\n      <audio ref={refSoundSuccess} src={soundSuccess} />\n      <audio ref={refSoundError} src={soundError} />\n    </>\n  );\n};\n\nBoardContainer.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  dimension: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number),\n  countPairs: PropTypes.number.isRequired,\n  gameInProgress: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  resizeBoard: PropTypes.func.isRequired,\n  showAllCards: PropTypes.func.isRequired,\n  finishGame: PropTypes.func.isRequired,\n  saveFinishedGame: PropTypes.func.isRequired,\n  setCards: PropTypes.func.isRequired,\n  cardsBG: PropTypes.string.isRequired,\n  opacity: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  cards: getCards(state),\n  flipped: getFlipped(state),\n  dimension: getDimension(state),\n  disabled: getDisabled(state),\n  solved: getSolved(state),\n  countPairs: getCountPairs(state),\n  gameInProgress: getGameInProgress(state),\n  cardsBG: getCardsBG(state),\n  opacity: getOpacityBG(state)\n\n});\n\nconst mapDispatchToProps = {\n  resizeBoard,\n  handleClick,\n  showAllCards,\n  finishGame,\n  setCards,\n  saveFinishedGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);\n\n\n    \n  // (\n  //     <Board\n  //       cards={cards}\n  //       flipped={flipped}\n  //       dimension={dimension}\n  //       handleClick={handleClick}\n  //       disabled={disabled}\n  //       solved={solved}\n  //     />\n  // );\n\n//   (\n//     <div className='board'>\n//        {cards.map((card) => (\n//           <Card\n//              key={card.id}\n//              id={card.id}\n//              type={card.type}\n//              width={dimension / 4.5}\n//              height={dimension / 4.5}\n//              flipped={flipped.includes(card.id)}\n//              handleClick={handleClick}\n//              disabled={disabled || solved.includes(card.id)}\n//              solved={solved.includes(card.id)}\n//           />\n//        ))}\n//     </div>\n//  );","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Menu\\Menu.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\deck.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\selectors\\mainSelectors.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\selectors\\statsSelectors.js",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Board\\Board.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\ChangeSize\\ChangeSize.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Music\\Music.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\CardBackground\\CardBackground.jsx",["127"],"import style from './CardBackground.module.scss';\nimport PropTypes from \"prop-types\";\n// import useSound from 'use-sound';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setCardsBG, setOpacityBG } from '../../redux/burgerReducer';\nimport { getOpacityBG } from '../../selectors/burgerSelectors';\nimport cn from \"classnames\";\n\nconst CardBackground = ({ setCardsBG, setOpacityBG, opacity }) => {\n\n   const [value, setValue] = useState(opacity * 100);\n   \n   useEffect(() => {\n      setOpacityBG(value / 100);\n   }, [value])\n\n   const onChangeOpacity = (e) => {\n      const value = +e.target.value;\n      setValue(() => value);\n   }\n\n   return (\n      <div className={style.cardsBgBlock}>\n         <div>Choose a background for the cards</div>\n         <div className={style.btnBlock}>\n            <button className={cn('btn', 'btn-danger')} onClick={() => setCardsBG('220,53,69')} >Red</button>\n            <button className={cn('btn', 'btn-primary')} onClick={() => setCardsBG('13,110,253')} >Blue</button>\n            <button className={cn('btn', 'btn-success')} onClick={() => setCardsBG('25,135,84')} >Green</button>\n            <button className={cn('btn', 'btn-light')} onClick={() => setCardsBG('255,255,255')} >White</button>\n         </div>\n         <div className={style.opacityBlock}>\n            <span>Opacity</span>\n            <input type=\"range\" min='0' max='100' onChange={onChangeOpacity} value={value} />\n         </div>\n      </div>\n   );\n}\n\nCardBackground.propTypes = {\n   opacity: PropTypes.number.isRequired,\n   setCardsBG: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n   opacity: getOpacityBG(state),\n});\n\nconst mapDispatchToProps = {\n   setCardsBG,\n   setOpacityBG,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBackground);\n","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Sound\\Sound.jsx",["128"],"import style from './Sound.module.scss';\nimport PropTypes from \"prop-types\";\n// import useSound from 'use-sound';\nimport React, { useEffect, useState } from 'react';\nimport Switch from '../Switch/Switch';\n\nconst Sound = ({toggleIsSound, setSoundVolume, isSoundActive}) => {\n\n   const [value, setValue] = useState(50);\n\n   useEffect(() => {\n      setSoundVolume(value / 100);\n   }, [value]);\n\n   const onchangeVolume = (e) => {\n      const volume = +e.target.value;\n      setValue(volume);\n   }\n\n   return (\n      <div className={style.soundBlock}>\n\n         <span>Sound</span>\n\n         <input onChange={onchangeVolume} id=\"range\" min=\"0\" max=\"100\" value={value} type=\"range\" />\n\n         <Switch toggle={toggleIsSound} checked={isSoundActive} />\n         \n      </div>\n   );\n}\n\nSound.propTypes = {\n   setSoundVolume: PropTypes.func.isRequired,\n   toggleIsSound: PropTypes.func.isRequired,\n   isSoundActive: PropTypes.bool.isRequired\n}\n\nexport default Sound;\n","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Card\\Card.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Switch\\Switch.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Stats\\StatsContainer.jsx",["129"],"import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { updateGameTime, statsResetState } from '../../redux/statsReducer';\nimport { getGameTime, getSeconds, getMinutes, getTrueAttempts, getFalseAttempts } from '../../selectors/statsSelectors';\nimport PropTypes from \"prop-types\";\nimport Stats from './Stats';\n\nconst StatsContainer = ({ gameTime, minutes, seconds, trueAttempts, falseAttempts, updateGameTime, statsResetState }) => {\n\n   useEffect(() => {\n      if (!gameTime && !minutes && !seconds) return;\n      const timer = setTimeout(() => updateGameTime(minutes, seconds), 1000);\n      if (!gameTime && (minutes || seconds)) {\n         statsResetState();\n         clearTimeout(timer);\n      }\n\n      return () => clearTimeout(timer);\n   }, [gameTime, minutes, seconds]);\n\n   const addZero = (n) => {\n      return (n < 10 ? '0' + n : n)\n    };\n   \n   return (\n      <Stats\n         time={`${addZero(minutes)}:${addZero(seconds)}`}\n         trueAttempts={trueAttempts}\n         falseAttempts={falseAttempts}\n      />\n   );\n}\n\nStatsContainer.propTypes = {\n   gameTime: PropTypes.bool.isRequired,\n   minutes: PropTypes.number.isRequired,\n   seconds: PropTypes.number.isRequired,\n   trueAttempts: PropTypes.number.isRequired,\n   falseAttempts: PropTypes.number.isRequired,\n   updateGameTime: PropTypes.func.isRequired,\n   statsResetState: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n   gameTime: getGameTime(state),\n   minutes: getMinutes(state),\n   seconds: getSeconds(state),\n   trueAttempts: getTrueAttempts(state),\n   falseAttempts: getFalseAttempts(state),\n});\n\nconst mapDispatchToProps = {\n   updateGameTime,\n   statsResetState,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsContainer);","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\Stats\\Stats.jsx",[],"C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\StatsPage\\StatsPageContainer.jsx",["130","131","132","133","134","135","136","137"],"import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { updateGameTime, statsResetState } from '../../redux/statsReducer';\nimport { getGameTime, getSeconds, getMinutes, getTrueAttempts, getFalseAttempts, getFinishedGames } from '../../selectors/statsSelectors';\nimport PropTypes from \"prop-types\";\nimport StatsPage from './StatsPage';\nimport style from './StatsPage.module.scss';\n\nconst StatsPageContainer = ({ finishedGames }) => {\n   \n   const addZero = (n) => {\n      return (n < 10 ? '0' + n : n)\n   };\n\n   const statistic = finishedGames.map(({ id, size, minutes, seconds, trueAttempts, falseAttempts }, i) => (\n      <StatsPage key={id || i}\n         size={size}\n         time={`${addZero(minutes)}:${addZero(seconds)}`}\n         trueAttempts={trueAttempts}\n         falseAttempts={falseAttempts}\n         allAttempts={trueAttempts + falseAttempts}\n      />\n   ));\n   \n   return (\n      <div className={style.statsBlock} >\n         <div  className={style.header} >\n            <span>Field size</span>\n            <span>Time</span>\n            <span>Right attempts</span>\n            <span>Wrong attempts</span>\n            <span>All attempts</span>\n         </div>\n         {statistic}\n      </div>\n   );\n};\n\nStatsPageContainer.propTypes = {\n   finishedGames: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n   finishedGames: getFinishedGames(state),\n});\n\nexport default connect(mapStateToProps)(StatsPageContainer);","C:\\Users\\Admin\\OneDrive\\Рабочий стол\\Repositoties\\react-game\\src\\components\\StatsPage\\StatsPage.jsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":73,"nodeType":"144","messageId":"145","endLine":2,"endColumn":89},{"ruleId":"146","severity":1,"message":"147","line":29,"column":6,"nodeType":"148","endLine":29,"endColumn":18,"suggestions":"149"},{"ruleId":"146","severity":1,"message":"150","line":34,"column":6,"nodeType":"148","endLine":34,"endColumn":13,"suggestions":"151"},{"ruleId":"146","severity":1,"message":"152","line":48,"column":6,"nodeType":"148","endLine":48,"endColumn":14,"suggestions":"153"},{"ruleId":"146","severity":1,"message":"154","line":16,"column":7,"nodeType":"148","endLine":16,"endColumn":14,"suggestions":"155"},{"ruleId":"146","severity":1,"message":"156","line":13,"column":7,"nodeType":"148","endLine":13,"endColumn":14,"suggestions":"157"},{"ruleId":"146","severity":1,"message":"158","line":19,"column":7,"nodeType":"148","endLine":19,"endColumn":35,"suggestions":"159"},{"ruleId":"142","severity":1,"message":"160","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":19},{"ruleId":"142","severity":1,"message":"161","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":24},{"ruleId":"142","severity":1,"message":"162","line":3,"column":26,"nodeType":"144","messageId":"145","endLine":3,"endColumn":41},{"ruleId":"142","severity":1,"message":"163","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":21},{"ruleId":"142","severity":1,"message":"164","line":4,"column":23,"nodeType":"144","messageId":"145","endLine":4,"endColumn":33},{"ruleId":"142","severity":1,"message":"165","line":4,"column":35,"nodeType":"144","messageId":"145","endLine":4,"endColumn":45},{"ruleId":"142","severity":1,"message":"166","line":4,"column":47,"nodeType":"144","messageId":"145","endLine":4,"endColumn":62},{"ruleId":"142","severity":1,"message":"167","line":4,"column":64,"nodeType":"144","messageId":"145","endLine":4,"endColumn":80},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'saveFinishedGame' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cards.length', 'gameInProgress', and 'setCards'. Either include them or remove the dependency array. If 'setCards' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["170"],"React Hook useEffect has missing dependencies: 'resizeBoard' and 'showAllCards'. Either include them or remove the dependency array. If 'resizeBoard' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["171"],"React Hook useEffect has missing dependencies: 'cards.length', 'countPairs', 'finishGame', and 'saveFinishedGame'. Either include them or remove the dependency array. If 'saveFinishedGame' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["172"],"React Hook useEffect has a missing dependency: 'setOpacityBG'. Either include it or remove the dependency array. If 'setOpacityBG' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["173"],"React Hook useEffect has a missing dependency: 'setSoundVolume'. Either include it or remove the dependency array. If 'setSoundVolume' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["174"],"React Hook useEffect has missing dependencies: 'statsResetState' and 'updateGameTime'. Either include them or remove the dependency array. If 'updateGameTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["175"],"'useEffect' is defined but never used.","'updateGameTime' is defined but never used.","'statsResetState' is defined but never used.","'getGameTime' is defined but never used.","'getSeconds' is defined but never used.","'getMinutes' is defined but never used.","'getTrueAttempts' is defined but never used.","'getFalseAttempts' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [cards.length, countPairs, gameInProgress, setCards]",{"range":"188","text":"189"},"Update the dependencies array to be: [cards, resizeBoard, showAllCards]",{"range":"190","text":"191"},"Update the dependencies array to be: [cards.length, countPairs, finishGame, saveFinishedGame, solved]",{"range":"192","text":"193"},"Update the dependencies array to be: [setOpacityBG, value]",{"range":"194","text":"195"},"Update the dependencies array to be: [setSoundVolume, value]",{"range":"196","text":"197"},"Update the dependencies array to be: [gameTime, minutes, seconds, statsResetState, updateGameTime]",{"range":"198","text":"199"},[1249,1261],"[cards.length, countPairs, gameInProgress, setCards]",[1329,1336],"[cards, resizeBoard, showAllCards]",[1708,1716],"[cards.length, countPairs, finishGame, saveFinishedGame, solved]",[565,572],"[setOpacityBG, value]",[381,388],"[setSoundVolume, value]",[773,801],"[gameTime, minutes, seconds, statsResetState, updateGameTime]"]