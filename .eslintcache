[{"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\index.js":"1","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\reportWebVitals.js":"2","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\App\\App.js":"3","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Main\\Main.jsx":"4","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Footer\\Footer.jsx":"5","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\StatsPage\\StatsPageContainer.jsx":"6","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Header\\HeaderContainer.jsx":"7","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\selectors\\statsSelectors.js":"8","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\selectors\\burgerSelectors.js":"9","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\StatsPage\\StatsPage.jsx":"10","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Board\\BoardContainer.jsx":"11","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Stats\\StatsContainer.jsx":"12","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Header\\Header.jsx":"13","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Menu\\Menu.jsx":"14","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\selectors\\mainSelectors.js":"15","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Board\\Board.jsx":"16","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Stats\\Stats.jsx":"17","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\CardBackground\\CardBackground.jsx":"18","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\ChangeSize\\ChangeSize.jsx":"19","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Sound\\Sound.jsx":"20","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Music\\Music.jsx":"21","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Card\\Card.jsx":"22","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Switch\\Switch.jsx":"23","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\statsReducer.js":"24","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\mainReducer.js":"25","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\burgerReducer.js":"26","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\store.js":"27","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\utils\\deck.js":"28"},{"size":303,"mtime":1613634997814,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":929,"mtime":1614337958928,"results":"32","hashOfConfig":"30"},{"size":338,"mtime":1614323771844,"results":"33","hashOfConfig":"30"},{"size":907,"mtime":1614334206925,"results":"34","hashOfConfig":"30"},{"size":1478,"mtime":1614333340842,"results":"35","hashOfConfig":"30"},{"size":1063,"mtime":1614333027135,"results":"36","hashOfConfig":"30"},{"size":451,"mtime":1614323771880,"results":"37","hashOfConfig":"30"},{"size":327,"mtime":1614241733844,"results":"38","hashOfConfig":"30"},{"size":648,"mtime":1614328700463,"results":"39","hashOfConfig":"30"},{"size":4182,"mtime":1614333982552,"results":"40","hashOfConfig":"30"},{"size":1766,"mtime":1614333103022,"results":"41","hashOfConfig":"30"},{"size":692,"mtime":1614241733768,"results":"42","hashOfConfig":"30"},{"size":1886,"mtime":1614345027566,"results":"43","hashOfConfig":"30"},{"size":419,"mtime":1613982077636,"results":"44","hashOfConfig":"30"},{"size":1414,"mtime":1614241733617,"results":"45","hashOfConfig":"30"},{"size":516,"mtime":1614323771855,"results":"46","hashOfConfig":"30"},{"size":1842,"mtime":1614332988642,"results":"47","hashOfConfig":"30"},{"size":1519,"mtime":1614333500677,"results":"48","hashOfConfig":"30"},{"size":959,"mtime":1614247062527,"results":"49","hashOfConfig":"30"},{"size":1322,"mtime":1614241733816,"results":"50","hashOfConfig":"30"},{"size":1767,"mtime":1614345925558,"results":"51","hashOfConfig":"30"},{"size":537,"mtime":1614241733817,"results":"52","hashOfConfig":"30"},{"size":3865,"mtime":1614341414479,"results":"53","hashOfConfig":"30"},{"size":5509,"mtime":1614333717863,"results":"54","hashOfConfig":"30"},{"size":2969,"mtime":1614241733818,"results":"55","hashOfConfig":"30"},{"size":633,"mtime":1614241733837,"results":"56","hashOfConfig":"30"},{"size":852,"mtime":1614334131680,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"4eedzx",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\index.js",[],["119","120"],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\reportWebVitals.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\App\\App.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\StatsPage\\StatsPageContainer.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Header\\HeaderContainer.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\selectors\\statsSelectors.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\selectors\\burgerSelectors.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\StatsPage\\StatsPage.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Board\\BoardContainer.jsx",["121","122","123"],"// import './Board.css';\nimport React, { createRef, useEffect } from 'react';\nimport { handleClick, resizeBoard, showAllCards, finishGame, setCards } from '../../store/mainReducer';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { getCards, getCountPairs, getDimension, getDisabled, getFlipped, getGameInProgress, getSolved } from '../../selectors/mainSelectors';\nimport initializeDeck from '../../utils/deck';\nimport Board from './Board';\n// import Card from '../Card/Card';\nimport soundSuccess from '../../assets/sound/success.mp3';\nimport soundError from '../../assets/sound/error.mp3';\nimport { getCardsBG, getOpacityBG } from '../../selectors/burgerSelectors';\nimport { saveFinishedGame } from '../../store/statsReducer';\n\n\nconst BoardContainer = ({ resizeBoard, handleClick, showAllCards, finishGame, saveFinishedGame, cards, flipped, dimension, disabled, solved, setCards, countPairs, gameInProgress, cardsBG, opacity }) => {\n\n  const refSoundSuccess = createRef();\n  const refSoundError = createRef();\n\n  useEffect(() => {\n    const cardsArray = initializeDeck(countPairs);\n    if (!cards.length) {\n      setCards(cardsArray)\n    } else {\n      if (gameInProgress) return;\n      setCards(cardsArray)\n    };\n  }, [countPairs]);\n\n  useEffect(() => {\n    resizeBoard();\n    showAllCards();\n  }, [cards]);\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  useEffect(() => {\n    if (!cards.length) return;\n    if (solved.length === cards.length) {\n      saveFinishedGame(countPairs);\n      setTimeout(() => finishGame(countPairs), 1500);\n    }\n  }, [solved]);\n\n  return (\n    <>\n      <Board\n        cards={cards}\n        dimension={dimension}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        refSoundSuccess={refSoundSuccess}\n        refSoundError={refSoundError}\n        cardsBG={cardsBG}\n        opacity={opacity}\n      />\n      <audio ref={refSoundSuccess} src={soundSuccess} />\n      <audio ref={refSoundError} src={soundError} />\n    </>\n  );\n};\n\nBoardContainer.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  dimension: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number),\n  countPairs: PropTypes.number.isRequired,\n  gameInProgress: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  resizeBoard: PropTypes.func.isRequired,\n  showAllCards: PropTypes.func.isRequired,\n  finishGame: PropTypes.func.isRequired,\n  saveFinishedGame: PropTypes.func.isRequired,\n  setCards: PropTypes.func.isRequired,\n  cardsBG: PropTypes.string.isRequired,\n  opacity: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  cards: getCards(state),\n  flipped: getFlipped(state),\n  dimension: getDimension(state),\n  disabled: getDisabled(state),\n  solved: getSolved(state),\n  countPairs: getCountPairs(state),\n  gameInProgress: getGameInProgress(state),\n  cardsBG: getCardsBG(state),\n  opacity: getOpacityBG(state)\n\n});\n\nconst mapDispatchToProps = {\n  resizeBoard,\n  handleClick,\n  showAllCards,\n  finishGame,\n  setCards,\n  saveFinishedGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);\n\n\n    \n  // (\n  //     <Board\n  //       cards={cards}\n  //       flipped={flipped}\n  //       dimension={dimension}\n  //       handleClick={handleClick}\n  //       disabled={disabled}\n  //       solved={solved}\n  //     />\n  // );\n\n//   (\n//     <div className='board'>\n//        {cards.map((card) => (\n//           <Card\n//              key={card.id}\n//              id={card.id}\n//              type={card.type}\n//              width={dimension / 4.5}\n//              height={dimension / 4.5}\n//              flipped={flipped.includes(card.id)}\n//              handleClick={handleClick}\n//              disabled={disabled || solved.includes(card.id)}\n//              solved={solved.includes(card.id)}\n//           />\n//        ))}\n//     </div>\n//  );","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Stats\\StatsContainer.jsx",["124"],"import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { updateGameTime, statsResetState } from '../../redux/statsReducer';\nimport { getGameTime, getSeconds, getMinutes, getTrueAttempts, getFalseAttempts } from '../../selectors/statsSelectors';\nimport PropTypes from \"prop-types\";\nimport Stats from './Stats';\n\nconst StatsContainer = ({ gameTime, minutes, seconds, trueAttempts, falseAttempts, updateGameTime, statsResetState }) => {\n\n   useEffect(() => {\n      if (!gameTime && !minutes && !seconds) return;\n      const timer = setTimeout(() => updateGameTime(minutes, seconds), 1000);\n      if (!gameTime && (minutes || seconds)) {\n         statsResetState();\n         clearTimeout(timer);\n      }\n\n      return () => clearTimeout(timer);\n   }, [gameTime, minutes, seconds]);\n\n   const addZero = (n) => {\n      return (n < 10 ? '0' + n : n)\n    };\n   \n   return (\n      <Stats\n         time={`${addZero(minutes)}:${addZero(seconds)}`}\n         trueAttempts={trueAttempts}\n         falseAttempts={falseAttempts}\n      />\n   );\n}\n\nStatsContainer.propTypes = {\n   gameTime: PropTypes.bool.isRequired,\n   minutes: PropTypes.number.isRequired,\n   seconds: PropTypes.number.isRequired,\n   trueAttempts: PropTypes.number.isRequired,\n   falseAttempts: PropTypes.number.isRequired,\n   updateGameTime: PropTypes.func.isRequired,\n   statsResetState: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n   gameTime: getGameTime(state),\n   minutes: getMinutes(state),\n   seconds: getSeconds(state),\n   trueAttempts: getTrueAttempts(state),\n   falseAttempts: getFalseAttempts(state),\n});\n\nconst mapDispatchToProps = {\n   updateGameTime,\n   statsResetState,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsContainer);","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Menu\\Menu.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\selectors\\mainSelectors.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Board\\Board.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Stats\\Stats.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\CardBackground\\CardBackground.jsx",["125"],"import style from './CardBackground.module.scss';\nimport PropTypes from \"prop-types\";\n// import useSound from 'use-sound';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setCardsBG, setOpacityBG } from '../../store/burgerReducer';\nimport { getOpacityBG } from '../../selectors/burgerSelectors';\nimport cn from \"classnames\";\n\nconst CardBackground = ({ setCardsBG, setOpacityBG, opacity }) => {\n\n   const [value, setValue] = useState(opacity * 100);\n   \n   useEffect(() => {\n      setOpacityBG(value / 100);\n   }, [value])\n\n   const onChangeOpacity = (e) => {\n      const value = +e.target.value;\n      setValue(() => value);\n   }\n\n   return (\n      <div className={style.cardsBgBlock}>\n         <div>Choose a background for the cards</div>\n         <div className={style.btnBlock}>\n            <button className={cn('btn', 'btn-danger')} onClick={() => setCardsBG('220,53,69')} >Red</button>\n            <button className={cn('btn', 'btn-primary')} onClick={() => setCardsBG('13,110,253')} >Blue</button>\n            <button className={cn('btn', 'btn-success')} onClick={() => setCardsBG('25,135,84')} >Green</button>\n            <button className={cn('btn', 'btn-light')} onClick={() => setCardsBG('255,255,255')} >White</button>\n         </div>\n         <div className={style.opacityBlock}>\n            <span>Opacity</span>\n            <input type=\"range\" min='0' max='100' onChange={onChangeOpacity} value={value} />\n         </div>\n      </div>\n   );\n}\n\nCardBackground.propTypes = {\n   opacity: PropTypes.number.isRequired,\n   setCardsBG: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n   opacity: getOpacityBG(state),\n});\n\nconst mapDispatchToProps = {\n   setCardsBG,\n   setOpacityBG,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardBackground);\n","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\ChangeSize\\ChangeSize.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Sound\\Sound.jsx",["126"],"import style from './Sound.module.scss';\nimport PropTypes from \"prop-types\";\n// import useSound from 'use-sound';\nimport React, { useEffect, useState } from 'react';\nimport Switch from '../Switch/Switch';\n\nconst Sound = ({toggleIsSound, setSoundVolume, isSoundActive}) => {\n\n   const [value, setValue] = useState(50);\n\n   useEffect(() => {\n      setSoundVolume(value / 100);\n   }, [value]);\n\n   const onchangeVolume = (e) => {\n      const volume = +e.target.value;\n      setValue(volume);\n   }\n\n   return (\n      <div className={style.soundBlock}>\n\n         <span>Sound</span>\n\n         <input onChange={onchangeVolume} id=\"range\" min=\"0\" max=\"100\" value={value} type=\"range\" />\n\n         <Switch toggle={toggleIsSound} checked={isSoundActive} />\n         \n      </div>\n   );\n}\n\nSound.propTypes = {\n   setSoundVolume: PropTypes.func.isRequired,\n   toggleIsSound: PropTypes.func.isRequired,\n   isSoundActive: PropTypes.bool.isRequired\n}\n\nexport default Sound;\n","C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Music\\Music.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Card\\Card.jsx",["127","128"],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\components\\Switch\\Switch.jsx",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\statsReducer.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\mainReducer.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\burgerReducer.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\store\\store.js",[],"C:\\Users\\OGE-Gestkov\\Desktop\\Repositiries\\react-game\\src\\utils\\deck.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":29,"column":6,"nodeType":"135","endLine":29,"endColumn":18,"suggestions":"136"},{"ruleId":"133","severity":1,"message":"137","line":34,"column":6,"nodeType":"135","endLine":34,"endColumn":13,"suggestions":"138"},{"ruleId":"133","severity":1,"message":"139","line":48,"column":6,"nodeType":"135","endLine":48,"endColumn":14,"suggestions":"140"},{"ruleId":"133","severity":1,"message":"141","line":19,"column":7,"nodeType":"135","endLine":19,"endColumn":35,"suggestions":"142"},{"ruleId":"133","severity":1,"message":"143","line":16,"column":7,"nodeType":"135","endLine":16,"endColumn":14,"suggestions":"144"},{"ruleId":"133","severity":1,"message":"145","line":13,"column":7,"nodeType":"135","endLine":13,"endColumn":14,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":4,"column":17,"nodeType":"149","messageId":"150","endLine":4,"endColumn":23},{"ruleId":"147","severity":1,"message":"151","line":12,"column":10,"nodeType":"149","messageId":"150","endLine":12,"endColumn":18},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cards.length', 'gameInProgress', and 'setCards'. Either include them or remove the dependency array. If 'setCards' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["154"],"React Hook useEffect has missing dependencies: 'resizeBoard' and 'showAllCards'. Either include them or remove the dependency array. If 'resizeBoard' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["155"],"React Hook useEffect has missing dependencies: 'cards.length', 'countPairs', 'finishGame', and 'saveFinishedGame'. Either include them or remove the dependency array. If 'saveFinishedGame' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["156"],"React Hook useEffect has missing dependencies: 'statsResetState' and 'updateGameTime'. Either include them or remove the dependency array. If 'updateGameTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["157"],"React Hook useEffect has a missing dependency: 'setOpacityBG'. Either include it or remove the dependency array. If 'setOpacityBG' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["158"],"React Hook useEffect has a missing dependency: 'setSoundVolume'. Either include it or remove the dependency array. If 'setSoundVolume' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["159"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'getFocus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [cards.length, countPairs, gameInProgress, setCards]",{"range":"172","text":"173"},"Update the dependencies array to be: [cards, resizeBoard, showAllCards]",{"range":"174","text":"175"},"Update the dependencies array to be: [cards.length, countPairs, finishGame, saveFinishedGame, solved]",{"range":"176","text":"177"},"Update the dependencies array to be: [gameTime, minutes, seconds, statsResetState, updateGameTime]",{"range":"178","text":"179"},"Update the dependencies array to be: [setOpacityBG, value]",{"range":"180","text":"181"},"Update the dependencies array to be: [setSoundVolume, value]",{"range":"182","text":"183"},[1255,1267],"[cards.length, countPairs, gameInProgress, setCards]",[1335,1342],"[cards, resizeBoard, showAllCards]",[1714,1722],"[cards.length, countPairs, finishGame, saveFinishedGame, solved]",[773,801],"[gameTime, minutes, seconds, statsResetState, updateGameTime]",[565,572],"[setOpacityBG, value]",[381,388],"[setSoundVolume, value]"]